/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package main.java.ApuCafetriaFood.ordering.system;


import java.awt.Color;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Kiran
 */
public class CustomerDashboard extends javax.swing.JFrame {

    /**
     * Creates new form CustomerDashboard
     */
    public CustomerDashboard() {
         setTitle("Customer Dashboard");
        initComponents();
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE); // Prevent default closing behavior
         // Add window listener to confirm exit
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                // Show confirmation dialog when trying to close the window
                int response;
                response = JOptionPane.showConfirmDialog(CustomerDashboard.this, 
                        "Do you really want to leave this site?",
                        "Exit Confirmation", 
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE);

                if (response == JOptionPane.YES_OPTION) {
                    System.exit(0); // Close the application if 'Yes'
                }
                // If 'No', nothing happens and the window remains open
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        logout = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        BackToHome = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        review = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        reviewNumberField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        reviewTextArea = new javax.swing.JTextField();
        itemNameField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        customerNameField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        menuTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        vieworder = new javax.swing.JButton();
        cancelorder = new javax.swing.JButton();
        payment = new javax.swing.JButton();
        refresh = new javax.swing.JButton();
        quantitySpinner = new javax.swing.JSpinner();
        viewmenu = new javax.swing.JButton();
        orders = new javax.swing.JButton();
        nameField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        btnCheckCustomerNotifications = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtCustomerArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        logout.setBackground(new java.awt.Color(255, 51, 51));
        logout.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        logout.setForeground(new java.awt.Color(255, 255, 255));
        logout.setText("LogOut");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });
        getContentPane().add(logout, new org.netbeans.lib.awtextra.AbsoluteConstraints(926, 12, -1, -1));

        jLabel16.setFont(new java.awt.Font("Sitka Text", 1, 24)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("CUSTOMER DASHBOARD");
        getContentPane().add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(389, 12, -1, -1));

        BackToHome.setBackground(new java.awt.Color(255, 0, 0));
        BackToHome.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        BackToHome.setForeground(new java.awt.Color(255, 255, 255));
        BackToHome.setText("Dashboard");
        BackToHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackToHomeActionPerformed(evt);
            }
        });
        getContentPane().add(BackToHome, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 9, -1, -1));

        jPanel1.setBackground(new java.awt.Color(0, 0, 51));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setFont(new java.awt.Font("Sitka Text", 1, 14)); // NOI18N
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(0, 0, 51));

        review.setText("Submit");
        review.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reviewActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Sitka Text", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Rating from 1 to 5");

        jLabel6.setFont(new java.awt.Font("Sitka Text", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Feedback Text");

        itemNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNameFieldActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Sitka Text", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Item Name");

        jLabel3.setFont(new java.awt.Font("Sitka Text", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Customer Name ");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Feedback Here!!");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(68, 68, 68))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(customerNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(review, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(itemNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reviewTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reviewNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(customerNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(itemNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reviewTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(reviewNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(review)
                .addGap(25, 25, 25))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 140, 290, 350));

        jLabel5.setFont(new java.awt.Font("Sitka Text", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("View Menu");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, 110, -1));

        menuTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Name", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(menuTable);
        if (menuTable.getColumnModel().getColumnCount() > 0) {
            menuTable.getColumnModel().getColumn(0).setResizable(false);
            menuTable.getColumnModel().getColumn(1).setResizable(false);
        }

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, 630, 207));

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Item", "Quantity", "Final Pricing", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(orderTable);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 380, 650, 278));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("View Order");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, 100, -1));

        vieworder.setText("View Order");
        vieworder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vieworderActionPerformed(evt);
            }
        });
        jPanel1.add(vieworder, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 340, 97, -1));

        cancelorder.setText("Cancel Order ");
        cancelorder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelorderActionPerformed(evt);
            }
        });
        jPanel1.add(cancelorder, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 340, 116, -1));

        payment.setText("Payement");
        payment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentActionPerformed(evt);
            }
        });
        jPanel1.add(payment, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 340, 94, -1));

        refresh.setText("Refresh");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });
        jPanel1.add(refresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 340, 86, -1));
        jPanel1.add(quantitySpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 60, 90, -1));

        viewmenu.setText("Menu");
        viewmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewmenuActionPerformed(evt);
            }
        });
        jPanel1.add(viewmenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 60, -1, -1));

        orders.setText("Order");
        orders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordersActionPerformed(evt);
            }
        });
        jPanel1.add(orders, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 60, -1, -1));

        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });
        jPanel1.add(nameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 60, 127, -1));

        jLabel8.setFont(new java.awt.Font("Sitka Text", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("UserName");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 60, -1, 20));

        btnCheckCustomerNotifications.setText("CheckNotification");
        btnCheckCustomerNotifications.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckCustomerNotificationsActionPerformed(evt);
            }
        });
        jPanel1.add(btnCheckCustomerNotifications, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 20, -1, -1));

        txtCustomerArea.setColumns(20);
        txtCustomerArea.setRows(5);
        jScrollPane1.setViewportView(txtCustomerArea);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 60, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1030, 750));

        pack();
    }// </editor-fold>//GEN-END:initComponents
private boolean isMenuVisible = false;
// View Menu button
    private void viewmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewmenuActionPerformed
    if (isMenuVisible) {
        // Hide the menu table
        menuTable.setVisible(false);
        JOptionPane.showMessageDialog(this, "Menu hidden!", "Info", JOptionPane.INFORMATION_MESSAGE);
    } else {
        // Show the table and load data
        DefaultTableModel model = (DefaultTableModel) menuTable.getModel();
        model.setRowCount(0); // Clear previous data
        System.out.println("Orders before update:");

        File file = new File("src/CustomerTextFiles/menu.txt");
        if (!file.exists()) {
            JOptionPane.showMessageDialog(this, "Menu file not found!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] data = line.split(",");
                if (data.length == 2) {
                    model.addRow(new Object[]{data[0], data[1]}); 
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error loading menu!", "Error", JOptionPane.ERROR_MESSAGE);
        }

        menuTable.setVisible(true);
        JOptionPane.showMessageDialog(this, "Menu shown!", "Info", JOptionPane.INFORMATION_MESSAGE);
    }

    // Toggle the flag
    isMenuVisible = !isMenuVisible;
    }//GEN-LAST:event_viewmenuActionPerformed
//Order as customer and which gets saved in customer.txt
    private void ordersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordersActionPerformed
                                         
     int selectedRow = menuTable.getSelectedRow();
    
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select an item!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String username = nameField.getText().trim();
    if (username.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Enter your name!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String item = (String) menuTable.getValueAt(selectedRow, 0); 
    int price = Integer.parseInt(menuTable.getValueAt(selectedRow, 1).toString()); // Get Price

    int quantity = (int) quantitySpinner.getValue(); 
    if (quantity <= 0) {
        JOptionPane.showMessageDialog(this, "Enter a valid quantity!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    int total = price * quantity;

    try (BufferedWriter writer = new BufferedWriter(new FileWriter("src/CustomerTextFiles/orders.txt", true))) {
        writer.write(username + "," + item + "," + quantity + "," + total + ",Pending");
        writer.newLine();
        JOptionPane.showMessageDialog(this, "Order placed successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        
        // Clear fields after successful order
        nameField.setText("");
        quantitySpinner.setValue(1); 
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error saving order!", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_ordersActionPerformed

    private boolean isOrderVisible = false; 
    //shows the all order 
    private void vieworderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vieworderActionPerformed
        if (isOrderVisible) {
        // Hide the orders table
        orderTable.setVisible(false);
        JOptionPane.showMessageDialog(this, "Orders hidden!", "Info", JOptionPane.INFORMATION_MESSAGE);
    } else {
        // Show the orders table and load data
        DefaultTableModel model = (DefaultTableModel) orderTable.getModel();
        model.setRowCount(0);  // Clear previous data

        File file = new File("src/CustomerTextFiles/orders.txt");
        if (!file.exists()) {
            JOptionPane.showMessageDialog(this, "No orders found!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] data = line.split(",");
                if (data.length == 5) {
                    model.addRow(new Object[]{data[0], data[1], data[2], data[3], data[4]});
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error loading orders!", "Error", JOptionPane.ERROR_MESSAGE);
        }

        orderTable.setVisible(true);
        JOptionPane.showMessageDialog(this, "Orders shown!", "Info", JOptionPane.INFORMATION_MESSAGE);
    }

    // Toggle the flag
    isOrderVisible = !isOrderVisible;
    }//GEN-LAST:event_vieworderActionPerformed
//cancels the order 
    private void cancelorderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelorderActionPerformed
        int selectedRow = orderTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an order to cancel!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        int confirmation = JOptionPane.showConfirmDialog(this, "Are you sure you want to cancel this order?", "Confirm Cancellation", JOptionPane.YES_NO_OPTION);
        if (confirmation != JOptionPane.YES_OPTION) {
            return;
        }
        
        String customerName = orderTable.getValueAt(selectedRow, 0).toString();
        String itemName = orderTable.getValueAt(selectedRow, 1).toString();
        String quantity = orderTable.getValueAt(selectedRow, 2).toString();
        String totalAmount = orderTable.getValueAt(selectedRow, 3).toString();
        
        File file = new File("src/CustomerTextFiles/orders.txt");
        File tempFile = new File("src/CustomerTextFiles/orders_temp.txt");
        try (BufferedReader br = new BufferedReader(new FileReader(file));
             BufferedWriter bw = new BufferedWriter(new FileWriter(tempFile))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] details = line.split(",");
                if (!(details.length == 5 &&
                      details[0].equals(customerName) &&
                      details[1].equals(itemName) &&
                      details[2].equals(quantity) &&
                      details[3].equals(totalAmount))) {
                    bw.write(line);
                    bw.newLine();
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error cancelling order!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        file.delete();
        tempFile.renameTo(file);
        
        ((DefaultTableModel) orderTable.getModel()).removeRow(selectedRow);
        JOptionPane.showMessageDialog(this, "Order cancelled successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_cancelorderActionPerformed
//way to payemetn the order
    private void paymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentActionPerformed
                                        
    int selectedRow = orderTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an order to pay for!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String customerName = orderTable.getValueAt(selectedRow, 0).toString();
        String itemName = orderTable.getValueAt(selectedRow, 1).toString();
        String quantity = orderTable.getValueAt(selectedRow, 2).toString();
        String totalAmount = orderTable.getValueAt(selectedRow, 3).toString();
        
        int confirmation = JOptionPane.showConfirmDialog(this, "Are you sure you want to make the payment?", "Confirm Payment", JOptionPane.YES_NO_OPTION);
        if (confirmation != JOptionPane.YES_OPTION) {
            return;
        }
        
        try (BufferedWriter bw = new BufferedWriter(new FileWriter("src/CustomerTextFiles/payments.txt", true))) {
            bw.write(customerName + "," + itemName + "," + quantity + "," + totalAmount + ",Paid");
            bw.newLine();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving payment!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        File file = new File("src/CustomerTextFiles/orders.txt");
        File tempFile = new File("src/CustomerTextFiles/orders_temp.txt");
        try (BufferedReader br = new BufferedReader(new FileReader(file));
             BufferedWriter bw = new BufferedWriter(new FileWriter(tempFile))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] details = line.split(",");
                if (details.length == 5 &&
                    details[0].equals(customerName) &&
                    details[1].equals(itemName) &&
                    details[2].equals(quantity) &&
                    details[3].equals(totalAmount)) {
                    bw.write(customerName + "," + itemName + "," + quantity + "," + totalAmount + ",Paid");
                } else {
                    bw.write(line);
                }
                bw.newLine();
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error updating order status!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        file.delete();
        tempFile.renameTo(file);
        
        orderTable.setValueAt("Paid", selectedRow, 4);
        JOptionPane.showMessageDialog(this, "Payment successful! Order marked as Paid.", "Success", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_paymentActionPerformed
//refersh button
    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
    DefaultTableModel model = (DefaultTableModel) orderTable.getModel();
        model.setRowCount(0);
        File file = new File("src/CustomerTextFiles/orders.txt");
        if (!file.exists()) {
            JOptionPane.showMessageDialog(this, "No orders found!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] data = line.split(",");
                if (data.length == 5) {
                    model.addRow(new Object[]{ data [0],data[1], data[2], data[3], data[4]});
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error loading orders!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_refreshActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        this.dispose();
        new Login().setVisible(true);
    }//GEN-LAST:event_logoutActionPerformed

    private void itemNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_itemNameFieldActionPerformed
//review button gives the review as required
    private void reviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reviewActionPerformed

        String customerName = customerNameField.getText().trim(); 
        String itemName = itemNameField.getText().trim();
        String reviewText = reviewTextArea.getText().trim(); 
        String reviewNumber = reviewNumberField.getText().trim(); 

        if (customerName.isEmpty() || itemName.isEmpty() || reviewText.isEmpty() || reviewNumber.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int rating;
        try {
            rating = Integer.parseInt(reviewNumber);
        if (rating < 1 || rating > 5) {
            JOptionPane.showMessageDialog(this, "Rating must be between 1 and 5!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid rating! Please enter a number between 1 and 5.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
    }

    try (BufferedWriter writer = new BufferedWriter(new FileWriter("src/CustomerTextFiles/reviews.txt", true))) {
        writer.write(customerName + "," + itemName + "," + reviewText + "," + rating);
        writer.newLine();
        JOptionPane.showMessageDialog(this, "Review submitted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        
        // Clear the input fields after submission
        customerNameField.setText("");
        itemNameField.setText("");
        reviewTextArea.setText("");
        reviewNumberField.setText("");
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error saving review!", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_reviewActionPerformed

    private void BackToHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackToHomeActionPerformed
       this.setVisible(false);  // Hides the current page
String userRole = "Customer"; 
    // Show the Main UI (Home Page)
    MainUI mainUI = new MainUI(userRole);  // Assuming MainUI is the class for your main home screen
    mainUI.setVisible(true); 
     mainUI.showRoleBasedContent(); 
    }//GEN-LAST:event_BackToHomeActionPerformed

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
     
    }//GEN-LAST:event_nameFieldActionPerformed

    private void btnCheckCustomerNotificationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckCustomerNotificationsActionPerformed
          File orderFile = new File("src/NotificationFiles/customer_notifications.txt");

    // Check if the file exists before attempting to read it
    if (!orderFile.exists()) {
        txtCustomerArea.setText("Order status file not found.");
        btnCheckCustomerNotifications.setBackground(Color.WHITE);  // Set button to white if file not found
        return;
    }

    try (BufferedReader br = new BufferedReader(new FileReader(orderFile))) {
        String line;
        StringBuilder notificationText = new StringBuilder();  // StringBuilder to collect all notifications

        while ((line = br.readLine()) != null) {
            // Debugging: Print the contents of each line
            System.out.println("Read line: " + line);

            // Append each line with a newline to ensure each notification appears on a new line
            notificationText.append(line).append("\n");
        }

        // If no notifications are found, show a default message
        if (notificationText.length() == 0) {
            notificationText.append("No new notifications.");
        }

        // Set the text in the text field (notifications on separate lines)
        txtCustomerArea.setText(notificationText.toString());

        // Set the button color (not based on notifications, just keeping it simple)
        btnCheckCustomerNotifications.setBackground(Color.WHITE);  // Set button to white if no special condition

    } catch (IOException ex) {
        txtCustomerArea.setText("Error reading file.");
        btnCheckCustomerNotifications.setBackground(Color.WHITE); // Set button to white in case of error
    }
    }//GEN-LAST:event_btnCheckCustomerNotificationsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new CustomerDashboard().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackToHome;
    private javax.swing.JButton btnCheckCustomerNotifications;
    private javax.swing.JButton cancelorder;
    private javax.swing.JTextField customerNameField;
    private javax.swing.JTextField itemNameField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton logout;
    private javax.swing.JTable menuTable;
    private javax.swing.JTextField nameField;
    private javax.swing.JTable orderTable;
    private javax.swing.JButton orders;
    private javax.swing.JButton payment;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JButton refresh;
    private javax.swing.JButton review;
    private javax.swing.JTextField reviewNumberField;
    private javax.swing.JTextField reviewTextArea;
    private javax.swing.JTextArea txtCustomerArea;
    private javax.swing.JButton viewmenu;
    private javax.swing.JButton vieworder;
    // End of variables declaration//GEN-END:variables

}
